# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five
# hundred divisors?

# find factors of all numbers until first number to have 500 factors

factors = []
number = 1
previous_number = 0
lim = 500
tri_number = 0


while number < 1000000
  tri_number = (1..number).map.reduce(:+)
  factors = (1..Math.sqrt(tri_number)).map {|n| [n, tri_number/n] if tri_number % n == 0 }.compact
  number += 1
  # puts tri_number
  # puts factors.inspect
    if factors.flatten(1).count > lim
        puts "You found it: #{tri_number}, #{number}: ---------------------------------------"
        break
    elsif number % 100 == 0
      puts number
      factors = []
      number += 1
      next
    end
  factors = []
end
